<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vector Assistant - Find Your Perfect Apartment</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #1a237e; /* Dark blue */
            --secondary-color: #303f9f; /* Slightly lighter blue */
            --accent-color: #3d5afe; /* Vibrant accent blue */
            --light-bg: #f5f7fa;
            --dark-bg: #121212;
            --user-bubble: #303f9f;
            --bot-bubble: #e8eaf6;
            --bot-text: #1a237e;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--light-bg);
            color: var(--dark-bg);
            min-height: 100vh;
        }
        
        .app-container {
            max-width: 800px;
            margin: 0 auto;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
            border-radius: 16px;
            overflow: hidden;
            background-color: white;
            height: 90vh;
            display: flex;
            flex-direction: column;
        }
        
        .app-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 1.75rem;
            position: relative;
        }
        
        .app-title {
            font-weight: 700;
            margin: 0;
            display: flex;
            align-items: center;
            font-size: 1.75rem;
        }
        
        .app-title i {
            margin-right: 12px;
            font-size: 1.8rem;
        }
        
        .app-subtitle {
            font-weight: 300;
            margin-top: 0.5rem;
            opacity: 0.9;
        }
        
        .chat-container {
            flex: 1;
            overflow-y: auto;
            padding: 1.5rem;
            background-color: white;
            border-bottom: 1px solid #dee2e6;
        }
        
        .message {
            display: flex;
            margin-bottom: 1rem;
            animation: fadeIn 0.3s ease-in-out;
            max-width: 85%;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .user-message {
            margin-left: auto;
            justify-content: flex-end;
        }
        
        .user-message-bubble {
            background-color: var(--user-bubble);
            color: white;
            border-radius: 18px 18px 0 18px;
            padding: 0.85rem 1.25rem;
            position: relative;
            word-break: break-word;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .assistant-message {
            margin-right: auto;
            justify-content: flex-start;
        }
        
        .assistant-avatar {
            width: 38px;
            height: 38px;
            border-radius: 50%;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 10px;
            flex-shrink: 0;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .assistant-message-bubble {
            background-color: var(--bot-bubble);
            color: #333;
            border-radius: 18px 18px 18px 0;
            padding: 0.85rem 1.25rem;
            position: relative;
            word-break: break-word;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        .listing-container {
            display: flex;
            flex-direction: column;
            margin-top: 0.5rem;
            width: 100%;
        }
        
        .listing-card {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            margin-bottom: 1rem;
            background-color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            overflow: hidden;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        
        .listing-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(26, 35, 126, 0.1);
        }
        
        .listing-header {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 0.5rem 0.75rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .listing-address {
            font-weight: 600;
            font-size: 0.95rem;
            margin: 0;
        }
        
        .listing-price {
            font-weight: 700;
            color: white;
            display: flex;
            align-items: baseline;
            background-color: rgba(255, 255, 255, 0.15);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
        }
        
        .listing-price-amount {
            font-size: 1rem;
        }
        
        .listing-price-period {
            font-size: 0.7rem;
            opacity: 0.85;
            margin-left: 0.15rem;
            font-weight: 400;
        }
        
        .listing-body {
            padding: 0.75rem;
        }
        
        .listing-detail {
            display: flex;
            align-items: center;
            margin-bottom: 0.25rem;
            font-size: 0.85rem;
        }
        
        .listing-detail i {
            color: var(--accent-color);
            margin-right: 0.4rem;
            width: 1rem;
            text-align: center;
        }
        
        .listing-specs {
            display: flex;
            margin-bottom: 0.5rem;
            border-bottom: 1px solid #f0f0f0;
            padding-bottom: 0.5rem;
        }
        
        .listing-spec {
            display: flex;
            align-items: center;
            margin-right: 1rem;
            font-size: 0.875rem;
        }
        
        .listing-spec i {
            color: var(--accent-color);
            margin-right: 0.3rem;
        }
        
        .listing-features {
            display: flex;
            flex-wrap: wrap;
            margin-top: 0.5rem;
        }
        
        .listing-feature {
            background-color: #f5f7fa;
            border-radius: 4px;
            padding: 0.25rem 0.5rem;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
            font-size: 0.75rem;
            color: var(--primary-color);
        }
        
        .listing-note {
            background-color: #e8f0fe;
            border-left: 3px solid var(--accent-color);
            padding: 0.5rem;
            margin-top: 0.5rem;
            font-size: 0.8rem;
        }
        
        .listings-header {
            background-color: var(--bot-bubble);
            border-radius: 12px;
            padding: 0.75rem 1rem;
            margin-bottom: 1rem;
            font-weight: 500;
            color: var(--primary-color);
            display: flex;
            align-items: center;
        }
        
        .listings-header i {
            margin-right: 0.5rem;
        }
        
        .no-listings {
            background-color: #f8f9fa;
            border-radius: 12px;
            padding: 1.25rem;
            border-left: 4px solid var(--accent-color);
        }
        
        .no-listings h5 {
            color: var(--primary-color);
            display: flex;
            align-items: center;
            margin-bottom: 0.75rem;
        }
        
        .no-listings h5 i {
            margin-right: 10px;
            color: var(--accent-color);
        }
        
        .no-listings ul {
            margin-bottom: 0.5rem;
        }
        
        .alternative-listing {
            margin-top: 1rem;
            border-top: 1px solid #eee;
            padding-top: 1rem;
        }
        
        .alternative-listing h6 {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 0.75rem;
        }
        
        .input-area {
            padding: 1.25rem;
            background-color: white;
        }
        
        .input-group {
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            border-radius: 30px;
            overflow: hidden;
        }
        
        .form-control {
            border: none;
            padding: 0.85rem 1.5rem;
            background-color: #f8f9fa;
            font-size: 1rem;
        }
        
        .form-control:focus {
            box-shadow: none;
            background-color: white;
        }
        
        .btn-send {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.85rem 1.75rem;
            font-weight: 500;
            transition: background-color 0.2s;
        }
        
        .btn-send:hover {
            background-color: var(--secondary-color);
        }
        
        .btn-reset {
            background-color: transparent;
            color: #6c757d;
            border: 1px solid #dee2e6;
            margin-top: 1rem;
            transition: all 0.2s;
        }
        
        .btn-reset:hover {
            background-color: #f8f9fa;
            border-color: #c1c9d0;
        }
        
        .typing-indicator {
            display: none;
            position: relative;
            min-height: 30px;
            width: auto;
            margin-bottom: 1rem;
        }
        
        .typing-indicator.active {
            display: flex;
        }
        
        .typing-indicator span {
            height: 8px;
            width: 8px;
            float: left;
            margin: 0 1px;
            background-color: var(--secondary-color);
            display: block;
            border-radius: 50%;
            opacity: 0.4;
        }
        
        .typing-indicator span:nth-of-type(1) {
            animation: 1s blink infinite 0.3333s;
        }
        
        .typing-indicator span:nth-of-type(2) {
            animation: 1s blink infinite 0.6666s;
        }
        
        .typing-indicator span:nth-of-type(3) {
            animation: 1s blink infinite 0.9999s;
        }
        
        @keyframes blink {
            50% {
                opacity: 1;
            }
        }
    </style>
</head>
<body>
    <div class="container mt-4 mb-4">
        <div class="app-container">
            <div class="app-header">
                <h1 class="app-title"><i class="fas fa-vector-square"></i> Vector Assistant</h1>
                <div class="app-subtitle">Your intelligent apartment-finding companion</div>
            </div>
            
            <div class="chat-container" id="chatContainer">
                <!-- Messages will be added here -->
            </div>
            
            <div class="typing-indicator" id="typingIndicator">
                <div class="assistant-avatar">
                    <i class="fas fa-vector-square"></i>
                </div>
                <span></span>
                <span></span>
                <span></span>
            </div>
            
            <div class="input-area">
                <div class="input-group mb-2">
                    <input type="text" id="userInput" class="form-control" placeholder="Type your message here...">
                    <button class="btn btn-send" id="sendButton"><i class="fas fa-paper-plane"></i></button>
                </div>
                <div class="text-center">
                    <button class="btn btn-reset btn-sm" id="resetButton">Start New Search</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatContainer = document.getElementById('chatContainer');
            const userInput = document.getElementById('userInput');
            const sendButton = document.getElementById('sendButton');
            const resetButton = document.getElementById('resetButton');
            const typingIndicator = document.getElementById('typingIndicator');
            
            // Start chat when page loads
            fetch('/start_chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                addMessage(data.message, 'assistant');
            })
            .catch(error => console.error('Error:', error));
            
            // Send message when button is clicked
            sendButton.addEventListener('click', sendMessage);
            
            // Or when Enter key is pressed
            userInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            // Reset button handler
            resetButton.addEventListener('click', function() {
                fetch('/reset', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(() => {
                    chatContainer.innerHTML = '';
                    // Restart chat
                    fetch('/start_chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        addMessage(data.message, 'assistant');
                    });
                })
                .catch(error => console.error('Error:', error));
            });
            
            function sendMessage() {
                const message = userInput.value.trim();
                if (message) {
                    // Add user message to chat
                    addMessage(message, 'user');
                    userInput.value = '';
                    
                    // Show typing indicator
                    showTypingIndicator(true);
                    
                    // Send to server
                    fetch('/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ message: message }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        // Hide typing indicator
                        showTypingIndicator(false);
                        
                        // Debug logging
                        console.log("=== Client Debug ===");
                        console.log("Response:", data);
                        console.log("Listings count:", data.listings ? data.listings.length : 0);
                        console.log("Alternative listings:", data.alternativeListings ? data.alternativeListings.length : 0);
                        console.log("==================");
                        
                        // Add assistant message
                        addMessage(data.message, 'assistant');
                        
                        // If there are listings, display them
                        if (data.listings && data.listings.length >= 0) {
                            addListings(data.listings, data.alternativeListings || []);
                        }
                    })
                    .catch(error => {
                        showTypingIndicator(false);
                        console.error('Error:', error);
                    });
                }
            }
            
            function addMessage(message, sender) {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('message');
                
                if (sender === 'user') {
                    messageDiv.classList.add('user-message');
                    
                    const bubble = document.createElement('div');
                    bubble.classList.add('user-message-bubble');
                    bubble.textContent = message;
                    
                    messageDiv.appendChild(bubble);
                } else {
                    messageDiv.classList.add('assistant-message');
                    
                    const avatar = document.createElement('div');
                    avatar.classList.add('assistant-avatar');
                    avatar.innerHTML = '<i class="fas fa-vector-square"></i>';
                    
                    const bubble = document.createElement('div');
                    bubble.classList.add('assistant-message-bubble');
                    bubble.textContent = message;
                    
                    messageDiv.appendChild(avatar);
                    messageDiv.appendChild(bubble);
                }
                
                chatContainer.appendChild(messageDiv);
                
                // Scroll to bottom
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
            
            function addListings(listings, alternativeListings) {
                const listingsContainer = document.createElement('div');
                listingsContainer.classList.add('message', 'assistant-message');
                
                const avatar = document.createElement('div');
                avatar.classList.add('assistant-avatar');
                avatar.innerHTML = '<i class="fas fa-vector-square"></i>';
                
                const listingContent = document.createElement('div');
                listingContent.classList.add('listing-container');
                
                if (listings.length === 0) {
                    // No exact matches found
                    const noListingsMsg = document.createElement('div');
                    noListingsMsg.classList.add('no-listings');
                    
                    let noMatchesHtml = `
                        <h5><i class="fas fa-info-circle"></i> No Exact Matches</h5>
                        <p>I couldn't find apartments matching all your criteria. Consider:</p>
                        <ul>
                            <li>Adjusting your budget range</li>
                            <li>Looking in different neighborhoods</li>
                            <li>Changing bedroom or bathroom requirements</li>
                            <li>Being more flexible with amenities</li>
                        </ul>
                    `;
                    
                    if (alternativeListings && alternativeListings.length > 0) {
                        noMatchesHtml += `<div class="alternative-listing">
                            <h6>Here are some alternatives you might like:</h6>
                        </div>`;
                    }
                    
                    noListingsMsg.innerHTML = noMatchesHtml;
                    listingContent.appendChild(noListingsMsg);
                    
                    // Add alternative listings if available
                    if (alternativeListings && alternativeListings.length > 0) {
                        alternativeListings.forEach((listing, index) => {
                            const listingCard = createListingCard(listing);
                            listingContent.appendChild(listingCard);
                        });
                    }
                } else {
                    // Add a header for the listings
                    const listingHeader = document.createElement('div');
                    listingHeader.classList.add('listings-header');
                    listingHeader.innerHTML = `<i class="fas fa-check-circle"></i> <span>Great! I found ${listings.length} ${listings.length === 1 ? 'listing' : 'listings'} that match your criteria:</span>`;
                    listingContent.appendChild(listingHeader);
                    
                    listings.forEach((listing, index) => {
                        const listingCard = createListingCard(listing);
                        listingContent.appendChild(listingCard);
                    });
                }
                
                listingsContainer.appendChild(avatar);
                listingsContainer.appendChild(listingContent);
                
                chatContainer.appendChild(listingsContainer);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }
            
            function createListingCard(listing) {
                const listingCard = document.createElement('div');
                listingCard.classList.add('listing-card');
                
                // Header with address and price
                const header = document.createElement('div');
                header.classList.add('listing-header');
                
                const address = document.createElement('div');
                address.classList.add('listing-address');
                address.textContent = listing.address;
                
                const price = document.createElement('div');
                price.classList.add('listing-price');
                
                const priceAmount = document.createElement('span');
                priceAmount.classList.add('listing-price-amount');
                priceAmount.textContent = `$${listing.price.toLocaleString()}`;
                
                const pricePeriod = document.createElement('span');
                pricePeriod.classList.add('listing-price-period');
                pricePeriod.textContent = '/mo';
                
                price.appendChild(priceAmount);
                price.appendChild(pricePeriod);
                
                header.appendChild(address);
                header.appendChild(price);
                listingCard.appendChild(header);
                
                // Body with details
                const body = document.createElement('div');
                body.classList.add('listing-body');
                
                // Specs section (beds, baths, neighborhood)
                const specs = document.createElement('div');
                specs.classList.add('listing-specs');
                
                // Add bedrooms/bathrooms
                const bedroomsBaths = document.createElement('div');
                bedroomsBaths.classList.add('listing-spec');
                bedroomsBaths.innerHTML = `<i class="fas fa-bed"></i>${listing.details}`;
                specs.appendChild(bedroomsBaths);
                
                // Add location
                const location = document.createElement('div');
                location.classList.add('listing-spec');
                location.innerHTML = `<i class="fas fa-map-marker-alt"></i>${listing.location}`;
                specs.appendChild(location);
                
                // Add exposure if available
                if (listing.exposure) {
                    const exposure = document.createElement('div');
                    exposure.classList.add('listing-spec');
                    exposure.innerHTML = `<i class="fas fa-sun"></i>${listing.exposure}`;
                    specs.appendChild(exposure);
                }
                
                body.appendChild(specs);
                
                // Features section (tags)
                if (listing.features && listing.features.length > 0) {
                    const features = document.createElement('div');
                    features.classList.add('listing-features');
                    
                    listing.features.forEach(feature => {
                        const featureTag = document.createElement('div');
                        featureTag.classList.add('listing-feature');
                        featureTag.textContent = feature;
                        features.appendChild(featureTag);
                    });
                    
                    body.appendChild(features);
                }
                
                // Building amenities if available
                if (listing.amenities && listing.amenities.length > 0) {
                    const amenities = document.createElement('div');
                    amenities.classList.add('listing-detail');
                    amenities.innerHTML = `<i class="fas fa-building"></i>Building: ${listing.amenities.join(', ')}`;
                    body.appendChild(amenities);
                }
                
                // Add note if present
                if (listing.note) {
                    const note = document.createElement('div');
                    note.classList.add('listing-note');
                    note.innerHTML = `<i class="fas fa-info-circle"></i> <span>${listing.note}</span>`;
                    body.appendChild(note);
                }
                
                listingCard.appendChild(body);
                
                return listingCard;
            }
            
            function showTypingIndicator(show) {
                if (show) {
                    typingIndicator.classList.add('active');
                } else {
                    typingIndicator.classList.remove('active');
                }
            }
        });
    </script>
</body>
</html>
